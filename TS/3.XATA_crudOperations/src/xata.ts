// // Generated by Xata Codegen 0.30.1. Please do not edit.
// import { buildClient } from "@xata.io/client";
// import type {
//   BaseClientOptions,
//   SchemaInference,
//   XataRecord,
//   BaseSchema,
// } from "@xata.io/client";

// import dotenv from 'dotenv';
// dotenv.config();

// const tables: readonly BaseSchema[] = [
//   {
//     name: "students",
//     checkConstraints: {
//       students_xata_id_length_xata_id: {
//         name: "students_xata_id_length_xata_id",
//         columns: ["xata_id"],
//         definition: "CHECK ((length(xata_id) < 256))",
//       },
//     },
//     foreignKeys: {},
//     primaryKey: [],
//     uniqueConstraints: {
//       _pgroll_new_students_xata_id_key: {
//         name: "_pgroll_new_students_xata_id_key",
//         columns: ["xata_id"],
//       },
//     },
//     columns: [
//       {
//         name: "Age",
//         type: "int",
//         notNull: false,
//         unique: false,
//         defaultValue: null,
//         comment: "",
//       },
//       {
//         name: "Grade",
//         type: "text",
//         notNull: false,
//         unique: false,
//         defaultValue: null,
//         comment: "",
//       },
//       {
//         name: "name",
//         type: "text",
//         notNull: false,
//         unique: false,
//         defaultValue: null,
//         comment: "",
//       },
//       {
//         name: "xata_createdat",
//         type: "datetime",
//         notNull: true,
//         unique: false,
//         defaultValue: "now()",
//         comment: "",
//       },
//       {
//         name: "xata_id",
//         type: "text",
//         notNull: true,
//         unique: true,
//         defaultValue: "('rec_'::text || (xata_private.xid())::text)",
//         comment: "",
//       },
//       {
//         name: "xata_updatedat",
//         type: "datetime",
//         notNull: true,
//         unique: false,
//         defaultValue: "now()",
//         comment: "",
//       },
//       {
//         name: "xata_version",
//         type: "int",
//         notNull: true,
//         unique: false,
//         defaultValue: "0",
//         comment: "",
//       },
//     ],
//   },
// ] as const;

// export type SchemaTables = typeof tables;
// export type InferredTypes = SchemaInference<SchemaTables>;

// export type Students = InferredTypes["students"];
// export type StudentsRecord = XataRecord & { name: string; Age: number; Grade: string };

// export type DatabaseSchema = {
//   students: StudentsRecord;
// };

// const DatabaseClient = buildClient();

// const defaultOptions: BaseClientOptions = {
//   databaseURL: process.env.XATA_DB_URL,
//   apiKey: process.env.XATA_API_KEY,
//   branch: process.env.XATA_BRANCH,
// };

// export class XataClient extends DatabaseClient<DatabaseSchema> {
//   constructor(options?: BaseClientOptions) {
//     super({ ...defaultOptions, ...options }, tables);
//   }
// }

// let instance: XataClient | undefined = undefined;

// export const getXataClient = () => {
//   if (instance) return instance;

//   instance = new XataClient();
//   return instance;
// };


// src/xata.ts
// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
  BaseSchema,
} from "@xata.io/client";

import dotenv from 'dotenv';
dotenv.config();

// import {ExtendedBa}
// Import your extended schema

const tables: readonly BaseSchema[] = [
  {
    name: "students",
    // checkConstraints: {
    //   students_xata_id_length_xata_id: {
    //     name: "students_xata_id_length_xata_id",
    //     columns: ["xata_id"],
    //     definition: "CHECK ((length(xata_id) < 256))",
    //   },
    // },
    // foreignKeys: {},
    // primaryKey: [],
    // uniqueConstraints: {
    //   _pgroll_new_students_xata_id_key: {
    //     name: "_pgroll_new_students_xata_id_key",
    //     columns: ["xata_id"],
    //   },
    // },
    columns: [
      {
        name: "Age",
        type: "int",
      },
      {
        name: "Grade",
        type: "text",
       
      },
      {
        name: "name",
        type: "text",
        
      },
      {
        name: "xata_createdat",
        type: "datetime",
       
      },
      {
        name: "xata_id",
        type: "text",
       
      },
      {
        name: "xata_updatedat",
        type: "datetime",
       
      },
      {
        name: "xata_version",
        type: "int",
        
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Students = InferredTypes["students"];
export type StudentsRecord = XataRecord & { name: string; Age: number; Grade: string };

export type DatabaseSchema = {
  students: StudentsRecord;
};

const DatabaseClient = buildClient();

// Validate environment variables
if (!process.env.XATA_DB_URL || !process.env.XATA_API_KEY || !process.env.XATA_BRANCH) {
  throw new Error("Missing required environment variables: XATA_DB_URL, XATA_API_KEY, XATA_BRANCH");
}

const defaultOptions: BaseClientOptions = {
  databaseURL: process.env.XATA_DB_URL,
  apiKey: process.env.XATA_API_KEY,
  branch: process.env.XATA_BRANCH,
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};

